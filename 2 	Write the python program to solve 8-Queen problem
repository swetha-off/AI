# 8-Queen Problem using 1D Array Backtracking

N = 8  # number of queens

def print_solution(queens):
    for i in range(N):
        row = ""
        for j in range(N):
            if queens[i] == j:
                row += "Q "
            else:
                row += ". "
        print(row)
    print("\n")


def is_safe(queens, row, col):
    for r in range(row):
        c = queens[r]
        if c == col or abs(c - col) == abs(r - row):
            return False
    return True


def solve(queens, row):
    if row == N:
        print_solution(queens)
        return True
    
    res = False
    for col in range(N):
        if is_safe(queens, row, col):
            queens[row] = col
            res = solve(queens, row + 1) or res
    return res


def nqueens():
    queens = [-1] * N
    if not solve(queens, 0):
        print("No solution exists")


if __name__ == "__main__":
    nqueens()
