import itertools

def travelling_salesman(graph, start):
    vertices = list(graph.keys())
    vertices.remove(start)

    min_path = None
    min_cost = float("inf")

    # Try all possible permutations of cities
    for perm in itertools.permutations(vertices):
        path = [start] + list(perm) + [start]

        # Calculate path cost
        cost = 0
        for i in range(len(path) - 1):
            cost += graph[path[i]][path[i+1]]

        # Update minimum
        if cost < min_cost:
            min_cost = cost
            min_path = path

    return min_path, min_cost


if __name__ == "__main__":
    # Graph as adjacency matrix (dictionary of dictionaries)
    graph = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }

    start = 'A'
    path, cost = travelling_salesman(graph, start)
    print("Optimal Path:", " -> ".join(path))
    print("Minimum Cost:", cost)
