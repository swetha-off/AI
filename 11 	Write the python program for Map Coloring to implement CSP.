# Map Coloring Problem using Backtracking (CSP)

# Example: Australia map
regions = ["WA", "NT", "SA", "Q", "NSW", "V", "T"]

# Neighbors for each region
neighbors = {
    "WA": ["NT", "SA"],
    "NT": ["WA", "SA", "Q"],
    "SA": ["WA", "NT", "Q", "NSW", "V"],
    "Q": ["NT", "SA", "NSW"],
    "NSW": ["Q", "SA", "V"],
    "V": ["SA", "NSW"],
    "T": []
}

# Available colors
colors = ["Red", "Green", "Blue"]


def is_valid(region, color, assignment):
    for neighbor in neighbors[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True


def backtrack(assignment):
    if len(assignment) == len(regions):
        return assignment

    # Pick an unassigned region
    unassigned = [r for r in regions if r not in assignment][0]

    for color in colors:
        if is_valid(unassigned, color, assignment):
            assignment[unassigned] = color
            result = backtrack(assignment)
            if result:
                return result
            assignment.pop(unassigned)

    return None


if __name__ == "__main__":
    solution = backtrack({})
    if solution:
        print("Map Coloring Solution:")
        for region in solution:
            print(region, "->", solution[region])
    else:
        print("No solution found.")
