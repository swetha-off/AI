from collections import deque

# BFS approach for Water Jug Problem
def water_jug(jug1, jug2, target):
    visited = set()
    queue = deque()
    queue.append((0, 0))  # start with both jugs empty

    while queue:
        x, y = queue.popleft()

        # If target is reached
        if x == target or y == target:
            print(f"Reached target: ({x}, {y})")
            return True

        if (x, y) in visited:
            continue
        visited.add((x, y))

        print(f"Visited state: ({x}, {y})")

        # Possible moves:
        moves = []

        # 1. Fill jug1
        moves.append((jug1, y))
        # 2. Fill jug2
        moves.append((x, jug2))
        # 3. Empty jug1
        moves.append((0, y))
        # 4. Empty jug2
        moves.append((x, 0))
        # 5. Pour jug1 -> jug2
        pour = min(x, jug2 - y)
        moves.append((x - pour, y + pour))
        # 6. Pour jug2 -> jug1
        pour = min(y, jug1 - x)
        moves.append((x + pour, y - pour))

        for move in moves:
            if move not in visited:
                queue.append(move)

    print("No solution possible")
    return False


if __name__ == "__main__":
    jug1 = 4
    jug2 = 3
    target = 2
    water_jug(jug1, jug2, target)
