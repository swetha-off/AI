from collections import deque

# State is represented as (M_left, C_left, boat_side, M_right, C_right)
# boat_side = "left" or "right"

def is_valid(m_left, c_left, m_right, c_right):
    # No negative numbers
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    # Missionaries eaten check
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False
    return True

def bfs():
    start = (3, 3, "left", 0, 0)
    goal = (0, 0, "right", 3, 3)
    visited = set()
    queue = deque([(start, [])])

    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)

        m_left, c_left, boat, m_right, c_right = state

        # Goal reached
        if state == goal:
            return path + [state]

        # Possible moves (1 or 2 people)
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

        for m, c in moves:
            if boat == "left":
                new_state = (m_left - m, c_left - c, "right", m_right + m, c_right + c)
            else:
                new_state = (m_left + m, c_left + c, "left", m_right - m, c_right - c)

            if is_valid(*new_state[:2], *new_state[3:]):
                queue.append((new_state, path + [state]))

    return None


if __name__ == "__main__":
    solution = bfs()
    if solution:
        print("Steps to solve Missionaries and Cannibals problem:")
        for step in solution:
            print(step)
    else:
        print("No solution found.")
